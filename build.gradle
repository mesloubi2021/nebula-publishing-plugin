/*
 * Copyright 2014-2020 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'nebula.plugin-plugin' version '17.0.0'
}

description 'Gradle plugin to ease use of ivy-publish and maven-publish'
group = 'com.netflix.nebula'

compileGroovy.groovyOptions.configurationScript = file('src/groovyCompile/groovycConfig.groovy')

contacts {
    'nebula-plugins-oss@netflix.com' {
        moniker 'Nebula Plugins Maintainers'
        github 'nebula-plugins'
    }
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    implementation 'com.netflix.nebula:gradle-info-plugin:latest.release'
    implementation 'com.netflix.nebula:gradle-contacts-plugin:latest.release'
    implementation 'com.netflix.nebula:nebula-gradle-interop:latest.release'

    testImplementation enforcedPlatform("com.fasterxml.jackson:jackson-bom:2.9.10.+")

    testImplementation gradleTestKit()
    testImplementation 'com.netflix.nebula:gradle-dependency-lock-plugin:latest.release'
    testImplementation 'com.netflix.nebula:gradle-resolution-rules-plugin:latest.release'
    testImplementation 'com.netflix.nebula:nebula-dependency-recommender:latest.release'
    testImplementation('org.jfrog.buildinfo:build-info-extractor-gradle:latest.release') {
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
    testRuntimeOnly files(tasks.createClasspathManifest)
}

gradlePlugin {
    plugins {
        mavenApacheLicense {
            id = 'nebula.maven-apache-license'
            implementationClass = 'nebula.plugin.publishing.maven.license.MavenApacheLicensePlugin'
        }

        mavenBasePublish {
            id = 'nebula.maven-base-publish'
            implementationClass = 'nebula.plugin.publishing.maven.MavenBasePublishPlugin'
        }

        mavenDeveloper {
            id = 'nebula.maven-developer'
            implementationClass = 'nebula.plugin.publishing.maven.MavenDeveloperPlugin'
        }

        mavenManifest {
            id = 'nebula.maven-manifest'
            implementationClass = 'nebula.plugin.publishing.maven.MavenManifestPlugin'
        }

        mavenNebulaPublish {
            id = 'nebula.maven-nebula-publish'
            implementationClass = 'nebula.plugin.publishing.maven.MavenNebulaPublishPlugin'
        }

        mavenPublish {
            id = 'nebula.maven-publish'
            implementationClass = 'nebula.plugin.publishing.maven.MavenPublishPlugin'
        }

        mavenShadowPublish {
            id = 'nebula.maven-shadow-publish'
            implementationClass = 'nebula.plugin.publishing.maven.MavenShadowPublishPlugin'
        }

        mavenResolvedDependencies {
            id = 'nebula.maven-resolved-dependencies'
            implementationClass = 'nebula.plugin.publishing.maven.MavenResolvedDependenciesPlugin'
        }

        mavenVerifyUnspecifiedVersionDependencies {
            id = 'nebula.maven-verify-unspecified-version-dependencies'
            implementationClass = 'nebula.plugin.publishing.maven.MavenVerifyUnspecifiedVersionDependenciesPlugin'
        }


        mavenScm {
            id = 'nebula.maven-scm'
            implementationClass = 'nebula.plugin.publishing.maven.MavenScmPlugin'
        }

        ivyBasePublish {
            id = 'nebula.ivy-base-publish'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyBasePublishPlugin'
        }

        ivyCompileOnly {
            id = 'nebula.ivy-compile-only'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyCompileOnlyPlugin'
        }

        ivyManifest {
            id = 'nebula.ivy-manifest'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyManifestPlugin'
        }

        ivyNebulaPublish {
            id = 'nebula.ivy-nebula-publish'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyNebulaPublishPlugin'
        }

        ivyPublish {
            id = 'nebula.ivy-publish'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyPublishPlugin'
        }

        ivyShadowPublish {
            id = 'nebula.ivy-shadow-publish'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyShadowPublishPlugin'
        }

        ivyResolvedDependencies {
            id = 'nebula.ivy-resolved-dependencies'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyResolvedDependenciesPlugin'
        }

        ivyVerifyUnspecifiedVersionDependencies {
            id = 'nebula.ivy-verify-unspecified-version-dependencies'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyVerifyUnspecifiedVersionDependenciesPlugin'
        }

        ivyRemovePlatformDependencies {
            id = 'nebula.ivy-remove-platform-dependencies'
            implementationClass = 'nebula.plugin.publishing.ivy.IvyRemovePlatformDependenciesPlugin'
        }

        publishVerification {
            id = 'nebula.publish-verification'
            implementationClass = 'nebula.plugin.publishing.verification.PublishVerificationPlugin'
        }

        javadocJar {
            id = 'nebula.javadoc-jar'
            implementationClass = 'nebula.plugin.publishing.publications.JavadocJarPlugin'
        }

        sourceJar {
            id = 'nebula.source-jar'
            implementationClass = 'nebula.plugin.publishing.publications.SourceJarPlugin'
        }

        springBootJar {
            id = 'nebula.spring-boot-jar'
            implementationClass = 'nebula.plugin.publishing.publications.SpringBootJarPlugin'
        }

        testJar {
            id = 'nebula.test-jar'
            implementationClass = 'nebula.plugin.publishing.publications.TestJarPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/nebula-plugins/nebula-publishing-plugin'
    vcsUrl = 'https://github.com/nebula-plugins/nebula-publishing-plugin.git'
    description = 'Plugins to ease maven-publish and ivy-publish configuration'
    pluginTags = [
            mavenApacheLicense:  ['nebula', 'publish', 'maven', 'apache', 'license'],
            mavenBasePublish:  ['nebula', 'publish', 'maven'],
            mavenDeveloper: ['nebula', 'publish', 'maven'],
            mavenManifest: ['nebula', 'publish', 'maven'],
            mavenPublish: ['nebula', 'publish', 'maven'],
            mavenNebulaPublish: ['nebula', 'publish', 'maven'],
            mavenShadowPublish: ['nebula', 'publish', 'maven', 'shadow'],
            mavenResolvedDependencies: ['nebula', 'publish', 'maven'],
            mavenVerifyUnspecifiedVersionDependencies: ['nebula', 'publish', 'maven'],
            mavenScm: ['nebula', 'publish', 'maven'],
            ivyBasePublish: ['nebula', 'publish', 'ivy'],
            ivyCompileOnly: ['nebula', 'publish', 'ivy'],
            ivyManifest: ['nebula', 'publish', 'ivy'],
            ivyPublish: ['nebula', 'publish', 'ivy'],
            ivyShadowPublish: ['nebula', 'publish', 'ivy', 'shadow'],
            ivyNebulaPublish: ['nebula', 'publish', 'ivy'],
            ivyResolvedDependencies: ['nebula', 'publish', 'ivy'],
            ivyVerifyUnspecifiedVersionDependencies: ['nebula', 'publish', 'ivy'],
            ivyRemovePlatformDependencies: ['nebula', 'publish', 'ivy'],
            publishVerification: ['nebula', 'publish'],
            javadocJar: ['nebula', 'publish', 'javadoc'],
            sourceJar: ['nebula', 'publish', 'source'],
            springBootJar: ['nebula', 'publish', 'spring-boot'],
            testJar: ['nebula', 'publish', 'test-jar']
    ]
}

targetCompatibility = JavaVersion.VERSION_1_8
sourceCompatibility = JavaVersion.VERSION_1_8

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

tasks.withType(Test) { Test testTask ->
    testTask.maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    testTask.doFirst {
        // Add the execution data only if the task runs
        jacocoTestReport.executionData.from = files("$buildDir/jacoco/${testTask.name}.exec")
    }
}
